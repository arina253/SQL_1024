CREATE TABLE EMPLOYEE2
(
EMPID INT,
NAME VARCHAR(7),
SALARY INT,
DOB DATE,
GENDER VARCHAR(1),
DEPARTMENT VARCHAR(4)
)

SELECT *FROM EMPLOYEE2

ALTER TABLE EMPLOYEE2 ALTER COLUMN EMPID TINYINT
ALTER TABLE EMPLOYEE2 ADD ISACTIVE BIT 

INSERT INTO EMPLOYEE2 VALUES(1,'SHIVARAJ',324432,'01/01/1998','M','HR'

Any keyword supported by the SQL Server will be shown in blue color.
 -- VARCHAR , DATE DATATYPE VALUES MUST BE ENCLOSED WITHIN THE SINGLE QUOTES

 Unicode - language other than English.
 In varchar we can store 8000 characters.
 In text datatype, we can store 2 GB text data. Eg: market research survey.

 fixed width - char
 variable character width - varchar

SMALLINT,
INT,
BIGINT
DECIMAL(3,1)
5.323 --> 5.00
NUMERIC --> 

 bit datatype - used when we want to know particular data is active or not.
 Can be 0,1 or NULL

 DECIMAL datatype allow more digits than standard precision.
 NUMERIC datatype is the exact precision.

 -------------------------------------------------------------------------------------------------------

 P - NUMBER OF DIGITS ON EITHER SIDE OF DECIMAL
 S - SCALE(NUMBER OF DIGITS ON RIGHT SIDE OF DECIMAL)

 DECIMAL & NUMERIC - WHAT IS MAXIMUM PRECISION
 (P - 38 DIGITS)
 DEFAULT VALUE OF PRECISION IS (18,0)

 CREATE TABLE SALESINFO (
 SALES DECIMAL,DISCOUNT NUMERIC)

 ALTER TABLE SALESINFO ALTER COLUMN SALES DECIMAL(5,2)
 ALTER TABLE SALESINFO ALTER COLUMN DISCOUNT NUMERIC(6,3)
  
  SELECT *FROM SALESINFO

  INSERT INTO SALESINFO 
  (SALES,DISCOUNT)VALUES
  ('123.45','123.45'),
  ('12.345','12.345'),
  ('120.345','12.34578')
  --If there is less number in the precision value, it cannot add
  is there is less number in the scalar , it will add 0.

  1 = TRUE
  0 = FALSE

  ANY VALUE GREATER THAN 1 ---> WILL BE CONVERTED TO 1
  VARCHAR VALUES ---> 'TRUE' OR 'FALSE'

  CREATE TABLE BIT_DT (FLAG BIT)
  SELECT *FROM BIT_DT
  INSERT INTO BIT_DT (FLAG)VALUES (1),(0),(NULL),(3)
  INSERT INTO BIT_DT (FLAG)VALUES (1),(0),(NULL),(3)
  INSERT INTO BIT_DT (FLAG)VALUES ('TRUE'),('FALSE')
  --IN BIT DATATYPE, 1 = TRUE & 0 = FALSE

  DATE AND TIME DATA TYPES
  DATETIME DATATYPE COMMONLY USED

  DROP TABLE DATEINFO

  CREATE TABLE DATEINFO (DATE1 DATETIME,DATE2 DATETIME2,DATE3 SMALLDATETIME,DATE4 DATE,DATE5 TIME)
  SELECT *FROM DATEINFO

  INSERT INTO DATEINFO (DATE1)VALUES('05/18/2024') ---- MM/DD/YYYY , YYYY/MM/DD
  -- OUTPUT --MM/DD/YYYY HR:MM:SS:MS

  INSERT INTO DATEINFO (DATE1,DATE2,DATE3,DATE4,DATE5)VALUES
  (GETDATE(),GETDATE(),GETDATE(),GETDATE(),GETDATE())
  INSERT INTO DATEINFO (DATE1,DATE2,DATE3,DATE4,DATE5)VALUES
  ('05/18/2024','05/18/2024','05/18/2024','05/18/2024','10:50:20')

   SELECT GETDATE()  IS A FUNCTION AND WILL USE DATETIME  DATATYPE
    SELECT SYSDATETIME()  IS A FUNCTION AND WILL USE DATETIME2 DATATYPE
	 SELECT CURRENT_TIMESTAMP()  IS A FUNCTION AND WILL USE DATETIME  DATATYPE
	  SELECT GETUTCDATE()  IS A FUNCTION AND WILL USE DATETIME  DATATYPE

	  EG: STOCK MARKET,
	  WHEREVER THERE IS A NEED TO HAVE ACCURACY IN TIME

	  REGISTRATION : DOB , NO NEED OF TIMESTAMP
	  TRAIN DEPARTURE_TIME , WE NEED TIMESTAMP

	  --MM/DD/YYYY HR:MM:SS:MS

	  CREATE TABLE TIMEOFF(CREATE_DT DATETIMEOFFSET)
	  SELECT *FROM TIMEOFF
	  INSERT INTO TIMEOFF VALUES(GETDATE())

INSERT INTO TIMEOFF VALUES('2024-05-20 12:08:34.5133333 +00:00')
INSERT INTO TIMEOFF VALUES('2024-05-20 12:08:34.5133333 +2:00')

SELECT CREATE_DT AS IST_ZONE,CREATE_DT AT TIME ZONE 'UTC'FROM TIMEOFF

CREATE TABLE TIMESTAMP (ID INT,PRODUCT VARCHAR(10),CREATE_DT TIMESTAMP)
SELECT *FROM TIMESTAMP
INSERT INTO TIMESTAMP (ID,PRODUCT)VALUES (1,'TV')

PRODUCT -- UNQUE --- TV,AC

ID - IDENTITY - WILL NOT ALLOW DUPLICATE
AUTOINCREMENTAL
DROP TABLE DUP
CREATE TABLE DUP (ID INT IDENTITY(10,10), PRODUCT VARCHAR (10))
SELECT *FROM DUP
INSERT INTO DUP (PRODUCT)VALUES('TV')



