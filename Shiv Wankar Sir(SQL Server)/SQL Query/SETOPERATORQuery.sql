SELECT *FROM STUDENTS
SELECT *FROM COURSES
SELECT *FROM STUDENT_COURSE

INDEPENDENT NESTED QUERY 
WE CAN RUN THE SUBQUERY INDEPENDENTLY/ WE DO NOT HAVE DEPENDENCY ON OUTER TABLES

--TO FIND STUDENT ID WHO OPT DBMS
SELECT *FROM DBO.STUDENT_COURSE
WHERE C_ID = (SELECT C_ID FROM DBO.COURSES WHERE C_NAME = 'DBMS')

-- TO FIND OUT THE NAME OF STUDENT WHO ARE ENROLLED IN DBMS

-- USE ALIAS
--INDEPENDENT NESTED QUERY
--DEPENDANT NESTED QUERY

--CORELATED SUBQUERY

SELECT S_NAME FROM STUDENTS S WHERE EXISTS (SELECT *FROM STUDENT_COURSE SC WHERE S.S_ID =SC.S_ID 
AND SC.C_ID = 'C3')

--WE ARE REFERENCING SOME COLUMN FROM OUTER TABLE

--EXISTS WILL CHECK IF DATA EXISTS OR NOT 

INSERT INTO TABLE
SELECT
FROM
WHERE ID NOT IN (sELECT FROM TABLE)

CREATE TABLE Customer
(
ID INT IDENTITY(1,1),
FirstName VARCHAR(25),
LastName VARCHAR(25)
)

CREATE TABLE Employeee1
(
ID INT IDENTITY(1,1),
FirstName VARCHAR(25),
LastName VARCHAR(25)
)


INSERT INTO Customer VALUES
 ('Stephen','Jones')
,('Mark','Smith')
,('Denise','King')
,('Paula','Johnson')
,('Richard','Archer')

INSERT INTO Employeee1 VALUES
 ('Christina','Jones')
,('Michael','McDonald')
,('Paula','Johnson')
,('Stephen','Jones')
,('Richard','Smith')

SELECT *FROM CUSTOMER
SELECT *FROM EMPLOYEEE1

--SQL SET OPERATORS
--USED ONLY WITH SELECT STATEMENT
--WE CAN COMBINE RESULTSET OF TWO DIFFERENT SELECT QUERIES INTO ONE

--STANDARD SYTAX FOR SET OPERATOR
SELECT QUERY1
SET_OPERATOR ---- (UNION/UNION ALL/EXCEPT/INTERSECT)
SELECT QUERY2
SET OPERATOR2
SELECT ANOTHER_sELECT_QUERY

--MINUS IS PRESENT IN MY SQL 

--RULES
THE NUMBER OF COLUMNS NEED TO MATCH BETWEEN TWO QUERIES AND DATA TYPE OF EACH COLUMN NEEDS TO BE COMPATIBLE.
--THE ORDER BY MUST GO AT THE END OF THE LAST QUERY

--UNION (COMBINING RESULTS)
REMOVES ANY DUPLICATE RESULTS AND SHOW UNIQUE RECORDS

SELECT FIRSTNAME,LASTNAME FROM CUSTOMER
UNION 
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEEE1

SELECT ID, FIRSTNAME,LASTNAME FROM CUSTOMER
UNION 
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEEE1
--All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.

SELECT ID, FIRSTNAME FROM CUSTOMER
UNION 
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEEE1
--Conversion failed when converting the varchar value 'Christina' to data type int.

SELECT FIRSTNAME,LASTNAME FROM CUSTOMER
WHERE ID > 3 AND LEFT(FIRSTNAME,1)IN ('C','P')
UNION 
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEEE1
WHERE ID < 3
ORDER BY FIRSTNAME DESC

--ORDER BY CLAUSE SHOULD GO AT END ONLY, IT SHOULD NOT BE ABOVE SET OPERATOR.
--WE CAN USE ALL THE FUNCTIONS IN SELECT QUERY.

--WHAT IS THE DIFFERENCE BETWEEN UNION AND JOIN?
WE ARE COMBINING THE RESULT SET/ROWS OF TWO SELECT QUERIES IN UNION
RESULT WILL BE COMBINED ON THE COLUMN BASIS IN JOIN

--UNION ALL
--COMBINES THE RESULTS FROM TWO QUERIES
--IT DOESN'T REMOVE DUPLICATE--
--WILL DISPLAY ALL ROWS FROM TWO SELECT QUERIES.

SELECT FIRSTNAME,LASTNAME FROM CUSTOMER
UNION ALL
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEEE1

RULES ARE SAME FOR EACH SET OPERATOR.

--DIFFERENCE BETWEEN UNION AND UNION ALL?
UNION PERFORMS A DISTINCT ON THE RESULT SET TO REMOVE DUPLICATES.

--3.EXCEPT
--RETURN RESULTS THAT ARE FOUND IN THE FIRST QUERY SPECIFIED THAT DOESN'T EXIST IN THE SECOND QUERY.

SELECT FIRSTNAME,LASTNAME FROM CUSTOMER
EXCEPT
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEEE1

--INTERSECT
--FIND RESULTS THAT EXISTS IN BOTH SELECT QUERIES
SELECT FIRSTNAME,LASTNAME FROM CUSTOMER
INTERSECT
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEEE1

SELECT 'CUSTOMER' AS RECORDTYPE,FIRSTNAME,LASTNAME FROM CUSTOMER
UNION 
SELECT 'EMPLOYEEE1' AS RECORDTYPE,FIRSTNAME,LASTNAME FROM EMPLOYEEE1
--WE GET 10 RECORDS

SELECT FIRSTNAME,LASTNAME FROM CUSTOMER
UNION
SELECT FIRSTNAME,LASTNAME FROM [AdventureWorks2022].[PERSON].[PERSON]
--19521 RECORDS

SELECT LASTNAME FROM CUSTOMER
UNION
SELECT LASTNAME FROM [AdventureWorks2022].[PERSON].[PERSON]
--1206 RECORDS

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

--SIR CLASSNOTE

CREATE TABLE Customer_Employee
(
--ID INT IDENTITY(1,1),
FirstName VARCHAR(25),
LastName VARCHAR(25)
)

CREATE TABLE Employeee
(
ID INT IDENTITY(1,1),
FirstName VARCHAR(25),
LastName VARCHAR(25)
)


INSERT INTO Customer VALUES
 ('Stephen','Jones')
,('Mark','Smith')
,('Denise','King')
,('Paula','Johnson')
,('Richard','Archer')

INSERT INTO Employeee VALUES
 ('Christina','Jones')
,('Michael','McDonald')
,('Paula','Johnson')
,('Stephen','Jones')
,('Richard','Smith')

SELECT * FROM Customer
SELECT * FROM Employeee

-- Standard Syntax for SET operators:
SELECT your_select_query
set_operator1
SELECT another_select_query;
set_operator2
SELECT another_select_query;
set_operator
SELECT another_select_query;
ORDER BY 


SELECT FirstName,LastName FROM Customer
SELECT FirstName,LastName FROM Employeee

SELECT FirstName,LastName FROM Customer
UNION
SELECT FirstName,LastName FROM Employeee

SELECT FirstName,LastName FROM Customer
WHERE ID>3 AND LEFT(FIRSTNAME,1) IN ('C','P')
UNION
SELECT FirstName,LastName FROM Employeee
WHERE ID<3
ORDER BY FirstName DESC

--SELECT * FROM dbo.Customer_Employee 
--INSERT INTO dbo.Customer_Employee (FirstName,LastName)
--(SELECT FirstName,LastName FROM Customer
--UNION
--SELECT FirstName,LastName FROM Employeee)

SELECT FirstName,LastName FROM Customer
UNION ALL
SELECT FirstName,LastName FROM Employeee

SELECT * FROM Customer
SELECT * FROM Employeee

SELECT FirstName,LastName FROM Customer
EXCEPT
SELECT FirstName,LastName FROM Employeee

SELECT FirstName,LastName FROM Customer
INTERSECT
SELECT FirstName,LastName FROM Employeee

SELECT 'Costomer' AS RecordType, FirstName,LastName FROM Customer
UNION
SELECT 'Employee' AS RecordType, FirstName,LastName FROM Employeee

SELECT LastName FROM Customer
UNION
SELECT LastName FROM [AdventureWorks2022].[Person].[Person]




