--SUBQUERY

--SPACE TO WRITE QUERY WITH SELECT STATEMENT 
--SUBQUERY ALSO CALLED NESTED QUERY OR INNER QUERY
--EMBEDDED WITHIN THE WHERE CLAUSE

SELECT *FROM DBO.EMPLOYEE  WHERE DEPARTMENTID = 2
SELECT *FROM DBO.DEPARTMENT

SELECT *FROM DBO.EMPLOYEE E
JOIN DBO.DEPARTMENT D
ON E.DEPARTMENTID = D.ID
WHERE D.DEPARTMENTNAME = 'PAYROLL'

SELECT *FROM DBO.EMPLOYEE 
WHERE DEPARTMENTID = (SELECT ID FROM DBO.DEPARTMENT WHERE DEPARTMENTNAME = 'PAYROLL')

--USED WHEN WE DONOT KNOW THE EXACT VALUE FOR WHERE CLAUSE
--TO PASS VALUES TO THE WEHRE CLAUSE
--USE JOIN WHEN POSSIBLE THAN SUBQUERY
--SUBQUERY IS AN OPTION TO JOIN.
--WHEN WE DONOT HAVE COMMON SELECT *FROM DBO.EMPLOYEE 

SELECT *FROM DBO.EMPLOYEE 
WHERE DEPARTMENTID = (SELECT ID FROM DBO.DEPARTMENT WHERE DEPARTMENTNAME IN ('PAYROLL','HR')) 


--WE SHOULD HAVE ONLY ONE COLUMN IN SELECT CLAUSE OF SUBQUERY.
--THERE SHOULD NE MULTIPLE COLUMNS IN THE MAIN QUERY IF MULTIPLE COLUMNS IN SELECT.
--CANNOT USE ORDER BY COMMAND WITHIN THE SUBQUERY BUT CAN BE USED IN MAIN QUERY.

--IF WE ARE GETTING MULTIPLE ROWS FROM SUBQUERY , WE SHOULD USE MULTIPLE VALUE OPERATOR THAT IS IN OPERATOR.
-- BETWEEN OPERATION CANNOT BE EMBEDDED IN MAIN QUERY FOR COMPARISONS BUT CAN BE USED WITHIN THE SUBQUERY

SELECT TOP 2*FROM PRODUCTION.PRODUCT WHERE PRODUCTSUBCATEGORY IS NOT NULL
		   
SELECT TOP 2 *FROM PRODUCTION.PRODUCTINVENTORY
SELECT TOP 2* FROM PRODUCTION.PRODUCTCATEGORY
SELECT TOP 2 *FROM PRODUCTION.PRODUCTSUBCATEGORY

SELECT *FROM PRODUCTION.PRODUCT
WHERE PRODUCTSUBCATEGORYID = 
(sELECT PRODUCT.SUBCATEGORYID FROM PRODUCTION.PRODUCTSUBCATEGORY
WHERE NAME = (SELECT NAME FROM PRODUCTION.PRODUCTCATEGORY WHERE PRODUCTCATEGORY =2))

--LAST SUBQUERY CAN ONLY BE USED WITH BETWEEN CLAUSE.
--WHERE CAN BE USED WITH DELETE,UPDATE
SUBQUERY CAN BE USED WITH SELECT,DELETE,UPDATE

---------------------------------------------------------------------------------------------------------------------------------

USE [SQL_1024]
GO

CREATE TABLE [dbo].[Courses](
 [C_Id] [varchar](2) NULL,
 [C_Name] [varchar](20) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[Student_Course](
 [S_Id] [varchar](2) NULL,
 [C_Id] [varchar](2) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[Students](
 [S_Id] [varchar](2) NULL,
 [S_Name] [varchar](20) NULL,
 [S_Address] [varchar](20) NULL,
 [S_Phone] [varchar](10) NULL
) ON [PRIMARY]
GO
INSERT [dbo].[Courses] ([C_Id], [C_Name]) VALUES (N'C1', N'DSA')
GO
INSERT [dbo].[Courses] ([C_Id], [C_Name]) VALUES (N'C2', N'Programming')
GO
INSERT [dbo].[Courses] ([C_Id], [C_Name]) VALUES (N'C3', N'DBMS')
GO
INSERT [dbo].[Student_Course] ([S_Id], [C_Id]) VALUES (N'S1', N'C1')
GO
INSERT [dbo].[Student_Course] ([S_Id], [C_Id]) VALUES (N'S1', N'C3')
GO
INSERT [dbo].[Student_Course] ([S_Id], [C_Id]) VALUES (N'S2', N'C1')
GO
INSERT [dbo].[Student_Course] ([S_Id], [C_Id]) VALUES (N'S3', N'C2')
GO
INSERT [dbo].[Student_Course] ([S_Id], [C_Id]) VALUES (N'S4', N'C2')
GO
INSERT [dbo].[Student_Course] ([S_Id], [C_Id]) VALUES (N'S4', N'C3')
GO
INSERT [dbo].[Students] ([S_Id], [S_Name], [S_Address], [S_Phone]) VALUES (N'S1', N'RAM', N'Manali', N'9455123451')
GO
INSERT [dbo].[Students] ([S_Id], [S_Name], [S_Address], [S_Phone]) VALUES (N'S2', N'RAMESH', N'Delhi', N'9652431543')
GO
INSERT [dbo].[Students] ([S_Id], [S_Name], [S_Address], [S_Phone]) VALUES (N'S3', N'SUJIT', N'Rohtak', N'9652431543')
GO
INSERT [dbo].[Students] ([S_Id], [S_Name], [S_Address], [S_Phone]) VALUES (N'S4', N'AJIT', N'Jalandhar', N'9156768971')
GO

SELECT *FROM DBO.COURSES
SELECT *FROM DBO.STUDENT_COURSE
SELECT *FROM DBO.STUDENTS

SELECT S.S_ID,C.C_NAME
FROM DBO.STUDENTS S
JOIN DBO.STUDENT_COURSE SC ON S.S_ID = SC.S_ID
JOIN DBO.COURSES C ON SC.C_ID = C.C_ID
WHERE C.C_NAME ='DSA' OR C.C_NAME = 'DBMS'

--1.find out S_ID who are enrolled in C_NAME ‘DSA’ or ‘DBMS’

SELECT S_ID FROM DBO.STUDENT_COURSE WHERE C_ID IN
(select C_ID from dbo.courses where c_name in ('DSA','DBMS'))

 --2.find out names of STUDENTs who have either enrolled in ‘DSA’ or ‘DBMS’, 

 SELECT S_NAME FROM DBO.STUDENTS WHERE S_ID IN(
 SELECT S_ID FROM DBO.STUDENT_COURSE WHERE C_ID IN (
 SELECT C_ID FROM DBO.COURSES WHERE C_NAME IN ('DSA','DBMS')))

--3.Select S_NAME from STUDENTS where S_ID IN (Select S_ID from STUDENT_COURSE where C_ID IN (SELECT 
C_ID from COURSES where C_NAME='DSA' or C_NAME='DBMS'));

--3. find out S_IDs of STUDENTs who have neither enrolled in ‘DSA’ nor in ‘DBMS’
SELECT S_ID FROM STUDENTS WHERE S_ID NOT IN(
SELECT S_ID FROM STUDENT_COURSE WHERE C_ID IN (
SELECT C_ID FROM COURSES WHERE C_NAME  IN ('DSA','DBMS')))

Select S_ID from STUDENTS where S_ID NOT IN (Select S_ID from STUDENT_COURSE where C_ID IN (SELECT 
C_ID from COURSES where C_NAME='DSA' or C_NAME='DBMS')); 



--INDEPENDENT SUBQUERY
DO NOT HAVE DEPENDENCY ON MAIN QUERY.INNER QUERY RUN INDEPENDENTLY
EXECUTION STARTS FROM INNERMOST QUERY TO OUTERMOST QUERIES.
RESULT OF INNER QUERY IS PASSED TO OUTER QUERY

SELECT *FROM DBO.STUDENTS
SELECT *FROM DBO.COURSES

--STUDENTS WHO ARE ENROLLED IN DSA AND DBMS

SELECT S_ID FROM DBO.STUDENT_COURSE
WHERE C_ID IN(SELECT C_ID FROM DBO.COURSES WHERE C_NAME IN ('DBMS','DSA'))

SELECT
FROM DBO.STUDENT_COURSE SC
JOIN DBO.COURSES C
ON SC.C_ID = C.C_ID
WHERE C.C_NAME IN ('DBMS','DSA')

-- STUDENTS WHO HAVE NOT ENROLLED IN DSA OR DBMS COURSE

SELECT S_ID FROM DBO.STUDENT_COURSE
WHERE C_ID IN(SELECT C_ID FROM DBO.COURSES WHERE C_NAME  NOT IN ('DBMS','DSA'))

--CORELATED SUBQUERY
--OUTER QUERY IS REQUIRED TO EXECUTE INNER QUERY

--STUDENTS WHO ARE ENROLLED WITH C_ID =C1
SELECT S_NAME FROM STUDENTS S
WHERE EXISTS (SELECT *FROM STUDENT_COURSE  SC WHERE S.S_ID  = SC.S_ID
AND SC.C_ID = 'C1')
--WE CANNOT RUN THE QUERY INDEPENDENTLY
--IN THE INNER QUERY, WE ARE REFERRING OUTER TABLE
--WHENEVER WE ARE REFERRING COLUMN IN INNER QUERY FROM OUTER TABLE, CALLED CORELATED SUBQUERY
--WE USE ALIASES IN SUBQUERY

SELECT S.S_NAME
FROM DBO.STUDENTS S
JOIN DBO.STUDENT_cOURSE SC ON S.S_ID = SC.S_ID
JOIN DBO.COURSES C ON SC.C_ID = C.C_ID
WHERE C.C_NAME = 'DSA'

--TO FIND OUT S_NAME OF STUDENTS WHO ARE ENROLLED IN C_ID 'DSA'

SELECT S_NAME FROM DBO.STUDENTS WHERE S_ID IN (
SELECT S_ID FROM STUDENT_COURSE WHERE C_ID IN (
SELECT C_ID FROM DBO.COURSES WHERE C_NAME = 'DSA'))

--find out S_NAME of STUDENTs who are enrolled in C_ID ‘C1’, it can be done with the help of co-related nested query as: 

Select S_NAME from STUDENTS S where EXISTS ( select * from STUDENT_COURSE SC where S.S_ID=SC.S_ID 
and SC.C_ID='C1');  

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--CLASSNOTE

SELECT * FROM dbo.Students 


SELECT * FROM dbo.Employee WHERE DepartmentId = 2
SELECT * FROM dbo.Department 

SELECT * FROM dbo.Employee  E
JOIN dbo.Department  D 
ON  E.DepartmentId = D.ID
WHERE D.DepartmentName = 'Payroll'

SELECT * FROM dbo.Employee WHERE DepartmentId = 2

SELECT * FROM dbo.Employee 
WHERE DepartmentId = (SELECT ID FROM dbo.Department WHERE DepartmentName = 'Payroll')

SELECT * FROM dbo.Employee 
WHERE DepartmentId = (SELECT ID FROM dbo.Department WHERE DepartmentName IN ('HR'))

DELETE FROM dbo.Employee 
WHERE DepartmentId IN (SELECT ID FROM dbo.Department WHERE DepartmentName IN ('HR','Payroll'))

SELECT * FROM dbo.Students
SELECT * FROM dbo.Courses
SELECT * FROM dbo.Student_Course

SELECT S_Id FROM dbo.Student_Course 
WHERE C_Id NOT IN (SELECT C_Id FROM dbo.Courses WHERE C_Name IN ('DBMS','DSA'))

SELECT SC.S_Id
FROM dbo.Student_Course SC
JOIN dbo.Courses C
ON SC.C_Id = C.C_Id
WHERE C.C_Name IN ('DBMS','DSA')

Select S_NAME from Students S 
where EXISTS (select * from STUDENT_COURSE SC where S.S_ID=SC.S_ID 
and SC.C_ID='C1');

SELECT S_Name FROM dbo.Students WHERE S_Id IN (
SELECT S_Id FROM Student_Course WHERE C_Id IN (
SELECT C_Id FROM dbo.Courses WHERE C_Name = 'DSA'))

SELECT S.S_Name
FROM dbo.Students S
JOIN dbo.Student_Course SC ON S.S_Id = SC.S_Id
JOIN dbo.Courses C ON SC.C_Id = C.C_Id
WHERE C.C_Name = 'DSA'