--VIEW
STORED PROCEDURE
HAVE BUNCH OF STATEMENTS-INSERT,SELECT,UPDATE.
SELECT STATEMENT TO FETCH DATA AND SHOW IT IN FRONTEND.
BANKING DOMAIN - THERE WILL BE CALCULATIONS MORE THAN OTHER DOMAIN.

--CREDIT CARD TRANSACTION IN BANKING
ONCE CREDIT CARD IS DISTRIBUTED, CAPTURE ALL THE DETAILS,SO INSERT PROCESS NEEDED
TYPE OF CARD, LIMIT OF CARD,CARD EXPIRY,FLAG
ONE PROCEDURE TO TRACK THE TRANSACTION.
ONE PROCEDURE TO BLOCK THE TRANSACTION
ONE PROCEDURE TO REMOVE THE BLOCK.

--A DATABASE OBJECT THAT HAS NO VALUES
--IT IS A VIRTUAL TABLE ,CREATED A/C TO THE RESULT SET OF AN SQL QUERY.
--SAME AS CTE
--ITS CONTENTS ARE BASED ON THE BASE TABLE.
--DOES NOT CONTAIN ANY DATA OF ITS OWN
--ITS NAME IS ALWAYS UNIQUE
--VIEWS ARE STORED PERMANENTLY IN THE DB
--WE CANNOT PASS PARAMETERS IN VIEWS.
--JUST GIVING DATA FROM BASE TABLE

DATABASES -VIEWS ----SYSTEM DEFINED VIEWS & USER DEFINED VIEWS

CREATE VIEW VIEWNAME
AS
SELECT STATEMENT

SELECT *FROM TBLEMPLOYEE
SELECT *FROM TBLDEPARTMENT

--TO CREATE A VIEW TO GIVE DATA LIKE EMP_ NAME | GENDER | DEPARTMENT_NAME

CREATE OR ALTER VIEW GETEMPDETAILS
AS
SELECT  NAME AS EMP_NAME,GENDER,D.DEPTNAME
FROM TBLEMPLOYEE E
JOIN TBLDEPARTMENT D
ON E.DEPARTMENTID = D.DEPTID

SELECT *FROM GETEMPDETAILS

--WE CAN HIDE THE BASE TABLES AND OTHER COLUMNS FROM THE TABLE BY USING VIEW.
EXEC SP_HELPTEXT '[INFORMATION_sCHEMA].PARAMETERS'
--CREATE SYNTAX FOR ANY DB OBJECT....GIVES THE TEXT UNDER THAT GIVEN OBJECT.

--HIDE ALL THE DETAILS OF UNDERLYING TABLE.
--USED TO REDUCE THE COMPLEXITY OF THE DB SCHEMA FOR NON IT-USERS
--TO IMPLEMENT ROW AND COLUMN LEVEL SECURITY

--VIEW IS ONLY SELECT STATEMENT.
--WE CAN USE VIEW IN SP AND JOINS
-- WE CAN USE TEMPTABLE IN JOINS

TEMP TABLE STORE REQUIRED RESULTSET BUT PERMANENTLY IN TEMPDB FOR SOME TIME .
CTE WITHIN A PARTICULAR TRANSACTION,CAN BE USED ONLY ONCE FOLLOWING THE CREATION OF CTE, NOT STORED IN DB
FUNCTION STORED IN DB PERMANENTLY BUT NOT STORING ANY DATA WHEN CALLED COMPILING .WE CAN PASS PARAMETER
VIEW STORED PERMANENTLY IN DB.WHEN VIEW IS USED IN SELECT STATEMENT, DIRECTLY CALLING DATA FROM BASE TABLE.

THERE WILL ALWAYS BE THIRD PARTY TOOL TO MAKE PAYMENT WHILE DOING ONLINE TRANSACTION.

-----------------------------------------------------------------------------------------------------------------

--CLASS NOTES

DROP TABLE IF EXISTS TBLEMPLOYEE
CREATE TABLE TBLEMPLOYEE
(
	ID INT PRIMARY KEY,
	NAME NVARCHAR (30),
	SALARY INT,
	GENDER NVARCHAR(10),
	DEPARTMENTID INT
)

--SQL SCRIPT TO CREATE TBLDEPARTMENT TABLE:

DROP TABLE IF EXISTS TBLDEPARTMENT
CREATE TABLE TBLDEPARTMENT
(
	DEPTID INT PRIMARY KEY,
	DEPTNAME NVARCHAR (20)
)

--INSERT DATA INTO TBLDEPARTMENT TABLE
Insert into tblDepartment values (1,'IT')
Insert into tblDepartment values (2,'Payroll')
Insert into tblDepartment values (3,'HR')
Insert into tblDepartment values (4,'Admin')

--Insert data into tblEmployee table
Insert into tblEmployee values (1,'John', 5000, 'Male', 3)
Insert into tblEmployee values (2,'Mike', 3400, 'Male', 2)
Insert into tblEmployee values (3,'Pam', 6000, 'Female', 1)
Insert into tblEmployee values (4,'Todd', 4800, 'Male', 4)
Insert into tblEmployee values (5,'Sara', 3200, 'Female', 1)
Insert into tblEmployee values (6,'Ben', 4800, 'Male', 3)

--To get the expected output, we need to join tblEmployees table with tblDepartments table

SELECT *FROM TBLEMPLOYEE
SELECT *FROM TBLDEPARTMENT

SELECT ID,NAME,SALARY,GENDER,DEPTNAME
FROM TBLEMPLOYEE
JOIN TBLDEPARTMENT
ON TBLEMPLOYEE.DEPARTMENTID = TBLDEPARTMENT.DEPTID

--Now let's create a view, using the JOINS query, we have just written. 

CREATE VIEW VWEMPLOYEESBYDEPARTMENT
AS
 SELECT ID,NAME,SALARY,GENDER,DEPTNAME
FROM TBLEMPLOYEE
JOIN TBLDEPARTMENT
ON TBLEMPLOYEE.DEPARTMENTID = TBLDEPARTMENT.DEPTID

--To select data from the view, SELECT statement can be used the way, we use it with a table.
SELECT *FROM VWEMPLOYEESBYDEPARTMENT

USE [AdventureWorks2022]
GO

SELECT *FROM [SALES].[SALESPERSON]


