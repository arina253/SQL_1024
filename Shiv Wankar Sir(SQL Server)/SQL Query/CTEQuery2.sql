--MULTIPLE CTE CAN BE CREATED

WE CAN CREATE MULTIPLE CTE WITH A SINGLE WITH CLAUSE
WE HAVE TO GIVE COMMA AFTER FIRST CTE IN CASE OF MULTIPLE CTE.


SELECT DEPTNAME,COUNT(ID)AS TOTALEMPLOYEES
INTO #TEMP
FROM TBLEMPLOYE
JOIN TBLDEPARTMENT
ON TBLEMPLOYE.DEPARTMENTID = TBLDEPARTMENT.DEPTID
GROUP BY DEPTNAME

SELECT *FROM #TEMP
UPDATE #TEMP SET DEPTNAME = 'HR' WHERE DEPTNAME='IT'

WHEN WE UPDATE DATA IN TEMP TABLE, BASE TABLE GETS UPDATED.

WITH CTE, DATA CAN BE UPDATED IN BASE TABLES ITSELF
UPDATE CTE SET DEPTNAME = 'HR'WHERE DEPTNAME ='IT'

--BASED ON THE NUMBER OF BASE TABLES AFFECTED BY CTE STATEMENT 

--USED WITH A SET OF DATA THAT NEEDS CALCULATION AGAIN AND AGAIN 
WHEN CTE DEPENDANT ON SINGLE TABLE, WE CAN UPDATE .
WHEN CTE DEPENDANT ON MULTIPLE TABLE,

--RECURSIVE CTE
A CTE THAT REFERENCES ITSELF 
USED TO FIND HIERARCHICAL DATA 

Create Table EmpMngr
(
EmployeeId int Primary key,
Name nvarchar(20),
ManagerId int
)
Insert into EmpMngr values (1, 'Tom', 2)
Insert into EmpMngr values (2, 'Josh', null)
Insert into EmpMngr values (3, 'Mike', 2)
Insert into EmpMngr values (4, 'John', 3)
Insert into EmpMngr values (5, 'Pam', 1)
Insert into EmpMngr values (6, 'Mary', 3)
Insert into EmpMngr values (7, 'James', 1)
Insert into EmpMngr values (8, 'Sam', 5)
Insert into EmpMngr values (9, 'Simon', 1)

SELECT *FROM EMPMNGR

--IN THE ADVENTURE WORKS DATABASE, MOSTLY RECURSIVE CTE IS USED.
-- IN INNER JOIN, WE WILL NOT GET NULL VALUES.
