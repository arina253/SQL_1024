--HOW TO HANDLE TRANSACTION INSIDE STORED PROCEDURE

--TRANSACTION CONTROL LANGUAGE
--COMMIT
--ROLLBACK
--SAVEPOINT.

--SQL -TRANSACTION SHOULD BE ATOMIC (ENTIRE TRANSACTION SHOULD BE SUCCESSFUL OR ENTIRE TRANSACTION SHOULD FAIL)
--IF ALL TRANSACTION ARE SUCCESSFUL THEN ONLY COMMIT THE TRANSACTION TO THE DATABASE.

BEGIN
   UPDATE SYNTAX ---- SUCCESSFUL

   INSERT SYNTAX -----SUCCESSFUL

   SELECT ------ SUCCESSFUL

   UPDATES ----FAILED
END

IF ANY OF THE TRANSACTION FAILED, THEN ROLLED BACK TO THE ORIGINAL POSITION.
EG: SENDING MONEY-TRANSACTION HAPPENS IN TWO PLACES --DEBITED IN ONE A/C AND CREDITED TO RECEIVER'S ACCOUNT.BANK WILL REVERT OR ROLLBACK THE TRANSACTION TO THE INITIAL POSITION

--WITHOUT TRY CATCH BLOCK, WE CANNOT USE COMMIT TRANSACTION.
--WE SHOULD COMMIT ONLY WHEN BOTH TRANSACTIONS ARE SUCCESSFUL.
--IF THERE ARE NO ERRORS,CATCH BLOCK WILL NOT COME IN PICTURE.

CREATE PROC 
AS
BEGIN
	IF CONDITION
	BEGIN
		SQL TO GIVE MESSAGE (INCASE OF FAILURE)
	END
	ELSE
	BEGIN
		BEGIN TRY
		    BEGIN TRANSACTION
		       SQL STATEMENTS
		    COMMIT TRANSACTION
		END TRY
	    BEGIN CATCH
			ROLLBACK TRANSACTION
			CAPTURE ERRORS
        END CATCH
      END
END

--FOR COMMIT AND ROLLBACK,WE ALWAYS GO WITH TRY CATCH.
--COMMIT TRANSACTION IS USED WITHIN TRY BLOCK AND ROLLBACK TRANSACTION IS USED WITHIN CATCH BLOCK.

--ERROR CAN BE MANUAL
--EXCEPTION FOR SQL ERRORS

CREATE PROC
AS
BEGIN
	IF CONDITION
	BEGIN
		SQL TO GIVE MESSAGE
	END
	ELSE
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION
				SQL STATEMENTS
			COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION
			CAPTURE ERRORS
		END CATCH
	END
END

--TRANSACTION WILL HAVE TO BE EXECUTED TWICE - IT WILL START AND EITHER COMMIT WILL HAPPEN ELSE ROLLBACK WILL EXECUTE.
--TRANSACTION WILL EITHER COMMIT OR ROLLBACK BUT BOTH WILL NOT HAPPEN AT THE SAME TIME.

@@ERROR - USED TO CAPTURE THE ERROR AND SHOW ERROR MESSAGE.
IT IS CLEARED AND RESET ON EACH STATEMENT EXECUTION.
1- ERROR AND 0-NO ERROR

--TRY,CATCH BLOCK IS MOSTLY USED IN INSERT , UPDATE OF STORED PROCEDURE. 

----------------------------------------------------------------------------------------------------------------------------

-CLASS NOTES

SELECT *FROM TBLPRODUCT
SELECT *FROM TBLPRODUCTSALES

--USE OF TCL

CREATE PROCEDURE SPSELLPRODUCT
	@PRODUCTID INT,
	@QUANTITYTOSELL INT
AS
BEGIN
 DECLARE @STOCKAVAILABLE INT
 SELECT @STOCKAVAILABLE = QTYAVAILABLE FROM TBLPRODUCT WHERE PRODUCTID = @PRODUCTID

 IF (@STOCKAVAILABLE < @QUANTITYTOSELL)
 BEGIN
	RAISERROR ('NOT ENOUGH STOCK AVAILABLE',16,1)
 END
 ELSE
 BEGIN
  BEGIN TRY
   BEGIN TRANSACTION
   UPDATE TBLPRODUCT
   SET QTYAVAILABLE = (QTYAVAILABLE - @QUANTITYTOSELL)
   WHERE PRODUCTID = @PRODUCTID

   DECLARE @MAXPRODUCTSALESID INT
   SELECT @MAXPRODUCTSALESID = 
      CASE 
		WHEN MAX(PRODUCTSALESID) IS NULL THEN 0
	    ELSE MAX(PRODUCTSALESID)
	  END 
	  FROM TBLPRODUCTSALES 

	  SET @MAXPRODUCTSALESID = @MAXPRODUCTSALESID + 1

	  INSERT INTO TBLPRODUCTSALES(PRODUCTSALESID,PRODUCTID,QUANTITYSOLD) VALUES
	   (
	     @MAXPRODUCTSALESID,
	     @PRODUCTID,
	     @QUANTITYTOSELL
		)

	 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
	 ROLLBACK TRANSACTION
	 SELECT
	 ERROR_NUMBER() AS ERRORNUMBER,
	 ERROR_MESSAGE()AS ERRORMESSAGE,
	 ERROR_PROCEDURE() AS ERRORPROCEDURE,
	 ERROR_STATE() AS ERRORSTATE,
	 ERROR_SEVERITY() AS ERRORSEVERITY,
	 ERROR_LINE() AS ERRORLINE
    END CATCH
   END
END

EXEC SPSELLPRODUCT 1,20
EXEC SPSELLPRODUCT 1,140
     

