--ERROR HANDLING

Right click on object------ Modify

--Failing and displaying error message.
--capture the error and sent message

SP is a part of daily process, we will execute in scheduler
If sp fails,entire process fails.
@@Error function is used to find out error
RAISEERROR allows to generate our own error messages

--syntax
RAISEERROR ('MESSAGE TEXT', SEVERITY,STATE)
--USED FOR CUSTOMIZED ERROR MESSAGE
--WHEN STATEMENT WITHIN THE TRY BLOCK FAILS, CATCH BLOCK WILL BE EXECUTED AND CAPTURE THE ERROR

Severity level - integer between 0 and 25
State - integer from 0 through 255

CREATE PROC DBO.INSERT_PRODUCT
AS
BEGIN
	INSERT INTO TBLPRODUCT VALUES (1,'LAPTOPS',3000,150)
END

--SYSTEM FUNCTIONS USED FOR ERROR MESSAGE
ERROR_MESSAGE() - WILL GET ACTUAL COMPLETE ERROR MESSAGE
ERROR NUMBER()- UNIQUE NUMBER ASSIGNED BY SQL SERVER ENGINE.USED FOR DBA.

---------------------------------------------------------------------------------------------------

--WRITE A PROC TO SALE THE PRODUCTS(TRACK THE SALE OF THE PRODUCT) FROM PRODUCT TABLE

--2 TRANSACTIONS
--1.DEDUCT THE QTY AVAILABLE IN TBLPRODUCTS
--2.INSERT A ROW INTO TBLPRODUCTSALES TABLE WITH THE DATA

SELECT *FROM TBLPRODUCT
SELECT *FROM TBLPRODUCTSALES

-------------------------------------------------------------------------------------------------------------------------------------------------------

--CLASS NOTES

SELECT *FROM TBLPRODUCT
CREATE OR ALTER PROC DBO.INSERT_PRODUCT
AS
BEGIN
  --TRY-CATCH BLOCK
BEGIN TRY
	INSERT INTO TBLPRODUCT VALUES(1,'LAPTOPS',3000,150)
END TRY
BEGIN CATCH
	DECLARE @ERRORMESSAGE VARCHAR(500)
	SET @ERRORMESSAGE = ERROR_MESSAGE()
	RAISERROR(@ERRORMESSAGE,16,1)
END CATCH
END

EXEC DBO.INSERT_PRODUCT

CREATE TABLE TBLPRODUCT
(
PRODUCTID INT NOT NULL PRIMARY KEY,
NAME NVARCHAR(50),
UNITPRICE INT,
QTYAVAILABLE INT
)

CREATE TABLE TBLPRODUCTSALES
(
PRODUCTSALESID INT PRIMARY KEY,
PRODUCTID INT,
QUANTITYSOLD INT,
SOLDDATE DATETIME
)

BEGIN TRY
 INSERT INTO TBLPRODUCT VALUES(2,'TV',3000,150)
END TRY
BEGIN CATCH
 DECLARE @ERRORMESSAGE VARCHAR(500)
 SET @ERRORMESSAGE = ERROR_MESSAGE()
 RAISERROR ('ERROR DURING INSERT',10,1)
END CATCH

BEGIN TRY
 INSERT INTO TBLPRODUCT VALUES(2,'TV',3000,150)
END TRY
BEGIN CATCH
 SELECT ERROR_MESSAGE()AS ERRORMESSAGE,
 --ERROR_NUMBER()AS ERRORNUMBER,
 ERROR_LINE()AS ERRORLINE
END CATCH


SELECT *FROM TBLPRODUCT
SELECT *FROM TBLPRODUCTSALES

--WRITE A PROC TO SALE THE PRODUCTS FROM PRODUCT TABLE

--1. DEDUCT THE QTYAVAILABLE IN TBLPRODUCTS
--2.INSERT A ROW INTO TBLPRODUCTSALES TABLE WITH THE DATA

--METHOD 1: WITHOUT HANDLING ERROR

CREATE OR ALTER PROC USP_SELLPRODUCT
@PRODUCTID INT,
@QUANTITYSOLD INT
AS 
BEGIN
 DECLARE @MAXPRODUCTSALEID INT
 SET @MAXPRODUCTSALEID =(SELECT ISNULL(MAX(PRODUCTSALESID),0)FROM TBLPRODUCTSALES)

 SET @MAXPRODUCTSALEID = @MAXPRODUCTSALEID + 1

 UPDATE TBLPRODUCT
 SET
  QTYAVAILABLE = QTYAVAILABLE - @QUANTITYSOLD
 WHERE PRODUCTID = @PRODUCTID

 INSERT INTO TBLPRODUCTSALES
 (
  PRODUCTSALESID,
  PRODUCTID,
  QUANTITYSOLD,
  SOLDDATE
  )
  VALUES
  (
  @MAXPRODUCTSALEID,
  @PRODUCTID,
  @QUANTITYSOLD,
  GETDATE()
  )
  END

  SELECT *FROM DBO.TBLPRODUCT
  SELECT *FROM DBO.TBLPRODUCTSALES

  EXEC USP_SELLPRODUCT 2,10

  TRUNCATE TABLE TBLPRODUCT
  TRUNCATE TABLE TBLPRODUCTSALES

  INSERT INTO TBLPRODUCT VALUES 
  (1,'LAPTOPS',3000,150),
  (2,'DESKTOPS',3500,120),
  (3,'TV',2900,110)

  EXEC USP_sELLPRODUCT 3,10

  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  --METHOD 2: HANDLING ERROR

  CREATE OR ALTER PROC USP_SELLPRODUCT
  @PRODUCTID INT,
  @QUANTITYSOLD INT
  AS
  BEGIN
   DECLARE @QTYAVAILABLE INT
   SET @QTYAVAILABLE = (SELECT QTYAVAILABLE FROM TBLPRODUCT WHERE PRODUCTID = @PRODUCTID)

   IF @QTYAVAILABLE < @QUANTITYSOLD
   BEGIN
    RAISERROR ('ENOUGH STOCK IS NOT AVAILABLE CURRENTLY',16,1)
    --SELECT 'ENOUGH STOCK IS NOT AVAILABLE' AS [MESSAGE]
	END
	ELSE
	BEGIN
	 DECLARE @MAXPRODUCTSALEID INT
	 SET @MAXPRODUCTSALEID = (SELECT ISNULL(MAX(PRODUCTSALESID),0) FROM TBLPRODUCTSALES)

	 SET @MAXPRODUCTSALEID = @MAXPRODUCTSALEID + 1

	 UPDATE TBLPRODUCT
	 SET
	 QTYAVAILABLE = QTYAVAILABLE - @QUANTITYSOLD
	 WHERE PRODUCTID = @PRODUCTID

	 INSERT INTO TBLPRODUCTSALES
	 (
	 PRODUCTSALESID,
	 PRODUCTID,
	 QUANTITYSOLD,
	 SOLDDATE
	 )
	 VALUES
	 (
	 @MAXPRODUCTSALEID,
	 @PRODUCTID,
	 @QUANTITYSOLD,
	 GETDATE()
	 )
	 END
    END

EXEC USP_SELLPRODUCT 3,10

SELECT *FROM TBLPRODUCT
SELECT *FROM TBLPRODUCTSALES

EXEC USP_SELLPRODUCT 3,100  --ENOUGH STOCK IS NOT AVAILABLE

---------------------------------------------------------------------------------------------------------------------------




  







