--USER DEFINED FUNCTIONS

SYSTEM FUNCTIONS - TAKE DATA AS INPUT FROM US , PROCESS IT AND GIVE US SOME OUTPUT AS RESULT.

FUNCTIONS CANNOT BE USED FOR DML OPERATIONS, IT IS ONLY FOR SELECT STATEMENTS.
STORED PROCEDURE CAN BE USED FOR SELECT AS WELL AS DML OPERATIONS.

RULES FOR CREATING SQL SERVER FUNCTIONS
-NAME CANNOT BEGIN WITH SPECIAL CHARACTERS
-ONLY SELECT STATEMENT WORKS
-WHENEVER A FUNCTION IS CALLED,IT COMPILES.
-MUST RETURN A VALUE OR RESULT
-ACCEPTS ONLY INPUT PARAMETERS.
-CANNOT USE TRY CATCH STATEMENTS

--DIFFERENCE BETWEEN STORED PROCEDURE AND FUNCTIONS

EG: REAL SCENARIO: OVERPAY_AMT    OVERPAY_AMT_WORDS
                      20.00            VARCHAR
                       923              NINE HUNDRED TWENTY THEREE AND ZERO
--A SINGLE QUERY TO CONVERT INTO WORDINGS , NEED TO WRITE 12 LINES, IN THAT CASE, WE USE FUNCTIONS TO REDUCE COMPLEXITY.

DATABASE -------> PROGRAMMABILITY --------> FUNCTIONS ----------> TABLE VALUED FUNCTIONS AND SCALAR VALUED FUNCTIONS
 
 SCALAR - ANY FUNCTION RETURNING A SINGLE VALUE CALLED SCALAR VALUED FUNCTIONS.
 TABLE VALUED FUNCTION - RETURNING A TABLE

 --3 TYPES OF USER DEFINED FUNCTIONS
 1)SCALAR VALUED FUNCTIONS -ALWAYS RETURNS A SINGLE VALUE AS RESULT.MAY OR MAY NOT HAVE PARAMETERS
   RETURNED VALUE CAN BE ANY DATATYPE EXCEPT TEXT,NTEXT,IMAGE
 2) INLINE TABLE VALUED FUNCTIONS- RETURNS ROWS OF DATA
 3) MULTI STATEMENT TABLE VALUED FUNCTIONS

 1) SCALAR VALUED FUNCTION
 --MAY OR MAY NOT HAVE PARAMETER
 
 CREATE FUNCTION FUNCTION_NAME
 (
 @PARAMETER 1 DATATYPE,
 @PARAMETER 2 DATATYPE
 )
 RETURNS RETURN_DATATYPE
 AS
 BEGIN
    DECLARE VARIABLE
	SET VARIABLE = SELECT QUERY
	RETURN VARIABLE
END

TO CALL FUNCTION:
SELECT SCHEMANAME.FUNCTIONNAME(' ')
SELECT COL1,COL2,DBO.SCHEMANAME.FUNCTIONNAME(COL3)AS 'EXPECTED RESULT'FROM TABLE
WHERE DBO.SCHEMANAME.FUNCTIONNAME(COL3)=' '


-- TO CALCULATE AGE
CREATE FUNCTION BASIC_AGE
(@DOB DATE)
RETURNS INT
AS 
BEGIN
	DECLARE @CALCULATED_AGE INT
	SET @CALCULATED_AGE = DATEDIFF(YEAR,@DOB,GETDATE())
	RETURN @CALCULATED_AGE
END

SELECT DBO.BASIC_AGE('07-29-2024')

--FOR FUNCTION THERE SHOULD BE TWO PART NAME ONLY.

--IF WE WANT TO APPLY FUNCTION TO ENTIRE COLUMN

SELECT *FROM ADVENTUREWORKS2022.HUMANRESOURCES.EMPLOYEE
SELECT BUSINESSENTITYID,NATIONALIDNUMBER,JOBTITLE,BIRTHDATE,DBO.BASIC_AGE(BIRTHDATE) AS AGE FROM ADVENTUREWORKS2022.HUMANRESOURCES.EMPLOYEE

--TO GET DOMAIN PART
SELECT CHARINDEX('@',EMAILADDRESS)FROM ADVENTUREWORKS2022.PERSON.EMAILADDRESS
SELECT LEN(EMAILADDRESS)FROM ADVENTUREWORKS2022.PERSON.EMAILADDRESS

SELECT SUBSTRING(EMAILADDRESS,CHARINDEX('@',EMAILADDRESS),LEN(EMAILADDRESS)-CHARINDEX('@',EMAILADDRESS)+1))
FROM ADVENTUREWORKS2022.PERSON.EMAILADDRESS

CREATE OR ALTER FUNCTION GET_DOMAIN
(@EMAIL VARCHAR(255))
RETURNS VARCHAR(50)
AS
BEGIN 
	DECLARE @DOMAIN VARCHAR(50)

	SET @DOMAIN = (SELECT SUBSTRING(@EMAIL,CHARINDEX('@',@EMAIL),LEN(@EMAIL)-CHARINDEX('@',@EMAIL)+1))
    RETURN @DOMAIN
END

	SELECT DBO.GET_DOMAIN ('MSBIELEARNING@YAHOO.COM')

--CAN BE USED IN THE SELECT CLAUSE
--CAN BE USED IN WHERE CLAUSE

--TO DROP FUNCTION
--DROP FUNCTION DBO.GET_DOMAIN

--CALCULATING TOTAL LINE FOR EACH PRODUCT

---------------------------------------------------------------------------------------------------------------------------

--CLASS NOTES

In SQL Server there are 3 types of User Defined functions
1. Scalar functions
2. Inline table-valued functions
3. Multi statement table-valued functions

1. Scalar functions --
Scalar function always rerurn a single value

--To create a function, we use the following syntax: 
(Scalar function will always return a single value)

CREATE FUNCTION FUNCTION_NAME
(
@PARAMETER 1 DATATYPE,
@PARAMETER 2 DATATYPE,..
@PARAMETER N DATATYPE
)
RETURNS RETURN_DATATYPE
AS
BEGIN
 FUNCTION BODY/SELECT STATEMENTS/BUSINESS LOGIC/CALCULATION
 RETURN RETURN_VARIABLE_SAME_AS_RETURN_DATATYPE
END
GO

DROP FUNCTION BASIC_AGE
CREATE FUNCTION BASIC_AGE
(@DOB DATE)
RETURNS INT
AS
BEGIN
 DECLARE @CALCULATED_AGE INT
 SET @CALCULATED_AGE = DATEDIFF(YEAR,@DOB,GETDATE())
 RETURN @CALCULATED_AGE
END

SELECT DBO.BASIC_AGE('01-01-2023')

SELECT *FROM ADVENTUREWORKS2022.HUMANRESOURCES.EMPLOYEE

SELECT 
   BUSINESSENTITYID,NATIONALIDNUMBER,JOBTITLE,BIRTHDATE,DBO.BASIC_AGE(BIRTHDATE)AS AGE
FROM ADVENTUREWORKS2022.HUMANRESOURCES.EMPLOYEE
WHERE DBO.BASIC_AGE(BIRTHDATE)>60


CREATE OR ALTER FUNCTION GET_DOMAIN
(@EMAIL VARCHAR(255))
RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @DOMAIN VARCHAR(50)
	SET @DOMAIN = (SELECT SUBSTRING(@EMAIL,CHARINDEX('@',@EMAIL),(LEN(@EMAIL)-CHARINDEX('@',@EMAIL)+1)))
	RETURN @DOMAIN
END

SELECT DBO.GET_DOMAIN ('MSBIELEARNING@YAHOO.COM')



SELECT *FROM AdventureWorks2022.Person.EmailAddress
SELECT CHARINDEX('@',EMAILADDRESS)FROM AdventureWorks2022.Person.EmailAddress

SELECT 
EmailAddressID,EmailAddress,dbo.GET_DOMAIN(EmailAddress)AS DOMAIN 
FROM AdventureWorks2022.Person.EmailAddress

--DROP FUNCTION DBO.GET_DOMAIN

--CREATE FUNCTION SCALAR VALUED UDF
CREATE FUNCTION DBO.UDF_COMPUTE_LINE_TOTAL
(
@ORDERQTY INT,
@UNITPRICE MONEY,
@UNITPRICEDISCOUNT MONEY
)
RETURNS NUMERIC(38,6)
AS
BEGIN
 DECLARE @LINETOTAL NUMERIC(38,6)
  SET @LINETOTAL = ((@ORDERQTY * @UNITPRICE)*(-@UNITPRICEDISCOUNT))
 RETURN @LINETOTAL
END

SELECT DBO.UDF_COMPUTE_LINE_TOTAL(3,2024.994,0.00)

SELECT *FROM AdventureWorks2022.Sales.SalesOrderDetail
SELECT TOP 20
 SalesOrderID,
 SalesOrderDetailID,
 OrderQty,
 ProductID,
 UnitPrice,
 UnitPriceDiscount,
 [LineTotal] [Line Total from function],
 dbo.udf_compute_line_total(OrderQty,UnitPrice,UnitPriceDiscount)[Line Total from function]
FROM [AdventureWorks2022].[Sales].[SalesOrderDetail]
where [UnitPriceDiscount]=0

--SUMMARY

3 TYPES OF USER DEFINED FUNCTIONS
1. SCALAR VALUED FUNCTION
2. INLINE TABLE VALUED FUNCTION
3. MULTI-STATEMENT TABLE VALUED FUNCTION

1. SCALAR VALUED FUNCTION -  RETURN A SINGLE VALUE AS RESULT

CREATE FUNCTION FunctionName 
(
 @INPUT1 DATATYPE -- OPTIONAL
)
RETURNS DATAYPE
AS
BEGIN 
 DECLARE VARIABLE
 SET VARIABLE = SELECT QUERY

 RETURN VARIABLE
END

ALTER FUNCTION FunctionName 
(
 @INPUT1 DATATYPE -- OPTIONAL
)
RETURNS DATAYPE
AS
BEGIN 
 DECLARE VARIABLE
 SET VARIABLE = SELECT QUERY

 RETURN VARIABLE
END

SELECT SCHEMANAME.FUNCTIONNAME('')

SELECT COL1, COL2, dbo.SCHEMANAME.FUNCTIONNAME(COL3) AS 'EXPECTED RESULT' FROM TABLE
WHERE dbo.SCHEMANAME.FUNCTIONNAME(COL3) = ''

DROP FUNCTION SCHEMANAME.FUNCTIONNAME 



