--Random seed = 0
SELECT TOP 10 *FROM ORDERS$

--Random seed=1
SELECT TOP 10 *FROM ORDERS$ WHERE CONVERT (INT,[ROW ID])%2=1

--Random seed = 2
SELECT TOP 10 *FROM ORDERS$ WHERE CONVERT(INT,[ROW ID])%3=1

SELECT TOP 10 *FROM ORDERS$ WHERE CONVERT (INT,[ROW ID])/2=0

--SORTING
SELECT *FROM ORDERS$-------RANDOM CUSTOMERS

SELECT *FROM ORDERS$ ORDER BY [CUSTOMER NAME]--------ASCENDING ORDER

SELECT *FROM ORDERS$ ORDER BY [CUSTOMER NAME]ASC

SELECT *FROM ORDERS$ ORDER BY [CUSTOMER NAME]DESC 

--WE CAN WRITE EITHER COLUMN NAME OR POSITION OF COLUMN IN SELECT STATEMENT IN ORDER BY CLAUSE
SELECT *FROM Orders$ ORDER BY 7 DESC
SELECT [CUSTOMER ID],[CUSTOMER NAME] FROM ORDERS$ ORDER BY 2 DESC
--IN SELECT STATEMENT,WHAT IS THE POSITION OF COLUMN,WE CAN GIVE COLUMN ORDER IF WE DONOT WANT TO WRITE COLUMN NAME

SELECT TOP 10 *FROM Orders$ ORDER BY SALES DESC
--SHOW HIGHEST SALES TOPWISE.

--NEED 20 ROWS - 10 HIGHEST SALE AND 10 LOWEST SALE IN A SINGLE OUTPUT

--TO COMBINE TWO DATA SET INTO ONE, WE USE UNION ALL.

-- Select top 10 orders by sales in descending order
SELECT TOP 10 *
FROM ORDERS$
ORDER BY SALES DESC

UNION ALL

-- Select top 10 orders by sales in ascending order
SELECT TOP 10 *
FROM ORDERS$
ORDER BY SALES ASC;




------------------------------------------------------------------------------------------------------------

CREATE TABLE TBLA
(
ID INT
)

CREATE TABLE TBLB
(
ID INT
)

INSERT INTO TBLA VALUES(1)
INSERT INTO TBLA VALUES(2)
INSERT INTO TBLA VALUES(3)
INSERT INTO TBLA VALUES(4)
INSERT INTO TBLA VALUES(5)

INSERT INTO TBLB VALUES(3)
INSERT INTO TBLB VALUES(4)
INSERT INTO TBLB VALUES(5)
INSERT INTO TBLB VALUES(6)
INSERT INTO TBLB VALUES(7)
INSERT INTO TBLB VALUES(8)

SELECT *FROM TBLA
SELECT *FROM TBLB

REQUIREMENT : NEED ALL VALUES FROM TBLA AND TBLB

SELECT *FROM TBLA
UNION ALL
SELECT *FROM TBLB
BOTH TABLE VALUES INTO A SINGLE OUTPUT.

--QUES: COMBINE TWO TABLES AND DISPLAY ONLY UNIQUE VALUES FROM BOTH TABLE

SELECT *FROM TBLA
UNION
SELECT *FROM TBLB

--UNION : COMBINE BOTH TABLE WITHOUT DUPLICATES.

------------------------------------------------------------------------

--IF TABLE HAVE DIFFERENT COLUMN NAME
GO TO DATABASE-----TBLB ------RENAME THE COLUMN ID TO NUMBER IN TBLB IN OBJECT EXPLORER

SELECT ID FROM TBLA
UNION
SELECT NUMBER FROM TBLB

--DIFFERENT COLUMNS NUMBER

ALTER TABLE TBLB ADD NAME VARCHAR(100)

SELECT *FROM TBLA
SELECT *FROM TBLB

SELECT *FROM TBLA
UNION ALL
SELECT *FROM TBLB
--All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.

SELECT ID FROM TBLA
UNION ALL
SELECT NUMBER FROM TBLB
--THE NUMBER OF COLUMN MUST BE SAME IN BOTH TABLES FOR PERFORMING UNION ALL OPERATION

--IF DATATYPE IS DIFFERENT
--CHANGE DATATYPE OF ANY EXISTING TABLE
ALTER TABLE TBLB ALTER COLUMN NUMBER VARCHAR(10)
SELECT ID FROM TBLA
UNION ALL
SELECT NUMBER FROM TBLB
--DATATYPE IS DEPENDENT ON VALUE WE ARE PASSING.WHEN WE PERFORM UNION ALL, SQL SERVER CONVERT VALUE TO INTEGER AND SHOW NO ERROR AS THE DATA INSERTED IS NUMBER ONLY.

--IF WE INSERT NON NUMERIC DATATYPE AFTER CHANGING THE DATATYPE TO VARCHAR,
INSERT INTO TBLB VALUES('A','')
SELECT ID FROM TBLA
UNION ALL
SELECT NUMBER FROM TBLB
--HERE WE WILL GET ERROR MESSAGE 
--Conversion failed when converting the varchar value 'A' to data type int.

--HOW TO SOLVE?
ID IN TBLA IS INTEGER
NUMBER IN TBLB IS VARCHAR.

EITHER CONVERT INT VALUE TO CHARACTER
EITHER CONVERT CHARACTER TO INT VALUE

--SSIS NEED SAME DATATYPE TO USE UNION ALL OPERATION
--CHANGE DATATYPE OF B TBL OR A TBL

SELECT CONVERT(VARCHAR(10),ID)AS RESULT FROM TBLA
UNION ALL
SELECT NUMBER FROM TBLB

--NOTE:
--SAME NUMBER OF COLUMNS IN BOTH TABLE
--SAME DATATYPE OF BOTH COLUMNS

--ANOTHER METHOD TO USE INSTEAD OF CONVERT FUNCTION
SELECT ID FROM TBLA
UNION ALL
SELECT NUMBER FROM TBLB WHERE NUMBER <>'A'

SELECT ID FROM TBLA
UNION ALL
SELECT NUMBER FROM TBLB WHERE ISNUMERIC(NUMBER)=1
--REQUIREMENT: TO ELIMINATE ALL VALUE WHICH IS NOT INTEGER.
--THERE IS DATA LOSS


--TO KNOW WHICH DATA IS LOST
SELECT NUMBER FROM TBLB WHERE ISNUMERIC(NUMBER)=0

SELECT *FROM ORDERS$ WHERE [CUSTOMER NAME]='CLAIRE GUTE'
QUES: CREATE A CSV FILE THAT CONTAIN ALL COLUMNS ONLY LATEST ORDERS OF EACH CUSTOMERS

--------------------------------------------------------------------------------------------------------------------------------------------------------------
SSIS PACKAGE: HW_1


SELECT *FROM ORDERS$
WHERE [CUSTOMER NAME] = 'Alice McCarthy'

--JOIN CONCEPT

SELECT *FROM  ORDERS$ AS B
JOIN
(
SELECT [CUSTOMER ID],MAX([ORDER DATE])AS [ORDER DATE] FROM ORDERS$
GROUP BY [CUSTOMER ID]
) AS A 
ON B.[CUSTOMER ID]=A.[CUSTOMER ID]
AND B.[ORDER DATE]=A.[ORDER DATE]

SELECT *FROM ORDERS$ WHERE [CUSTOMER ID] ='BW-11110' AND [ORDER DATE] = '2017-08-31 00:00:00.000'

Inner join - all matching records from both table
Left join - all records from left table either it match or not match with right table and matching records
Right join - all records from right side table and matching records from left table
Full join - all records

Why splitting data/ Why learning JOIN?
eg: Bank Account
AC NO | NAME | ADDRESS | DEBIT CARD NUMBER | 
9AM,10AM,11AM,12AM,1PM,2PM.....MANY TRANSACTIONS
--WE NEED TO MAKE A RELATIONSHIP

TRANSACTION TABLE
ACCOUNT |
9AM,10AM,11AM.....

STUDENT TABLE
STUDENTID | STUDENTNAME |ADDRESS |
PRIMARY KEY COLUMN - HOLD UNIQUE VALUES , NO NULL, NO BLANK VALUES
--IF WE DONOT PROVIDE ANY VALUE DURING INSERT WE GET NULL/AUTOMATICALLY INSERT NULL.
--BLANK IS A VALUE IN SQL SERVER.IF WE PROVIDE BLANK SPACE, WE GET BLANK

CLASSES TABLE
STUDENTID | CLASS | YEAR | SUBJECT1 | SUBJECT2 | SUBJECT 3
A|KG
A|NURSERY
2 TABLES: FIRST TABLE CONTAINS ONLY INFORMATION,NOT REPEATED VALUES

RDBMS - RELATIONAL DATABASE MANAGEMENT SYSTEM
DBMS - JUST STORE THE DATA AND PERFORM SEVERAL OPERATIONS.
RDBMS: STORE THE DATA WITH SOME RELATIONSHIP

