SELECT TOP 10 *FROM ORDERS$
SELECT TOP 10 *FROM RETURNS$

--customer name who return any orders
--ONLY THOSE CUSTOMER NAME WHO RETURN ORDER
--customer order already present in return table -inner join concept
-- combine two tables with the help of orderid and fetch customer name from order table.

--common value column
--WHENEVER JOINING COLUMN, WE ARE NOT LOOKING FOR COMMON COLUMN NAME BUT WE ARE LOOKING FOR COMMON VALUE COLUMN

--FOUR DIFFERENT WAYS OF WRITING THE QUERY
1)SELECT DISTINCT O.[CUSTOMER NAME] FROM ORDERS$ AS O
JOIN RETURNS$ AS R
ON O.[ORDER ID] = R.[ORDER ID]

--IF MATCHING COLUMN - INNER JOIN CONCEPT.

2)SELECT *FROM ORDERS$ AS O
JOIN RETURNS$ AS R
ON O.[ORDER ID] = R.[ORDER ID]


--USING SUBQUERY
3)SELECT DISTINCT [CUSTOMER NAME] FROM ORDERS$ WHERE [ORDER ID] IN
(SELECT [ORDER ID]FROM RETURNS$)
--THIS QUERY RETURNS MULTIPLE ROWS, SO WE ARE USING IN OPERATOR

4)SELECT DISTINCT O.[CUSTOMER NAME]FROM ORDERS$ AS O,RETURNS$ AS R
WHERE O.[ORDER ID] = R.[ORDER ID]

--SUBQUERY IS AUTOMATICALLY SLOW.

--CUSTOMER NAME  |  TOTAL ORDER PLACED  | TOTAL RETURN ORDERS ---- 792



SELECT *FROM ORDERS$ WHERE [CUSTOMER NAME] = 'AARON BERGMAN'

SELECT O.[CUSTOMER NAME], COUNT[ORDER ID],COUNT(DISTINCT O.[ORDER ID])AS [TOTAL ORDER PLACED],
COUNT (DISTINCT R.[ORDER ID]) AS [TOTAL RETURN ORDER]
FROM ORDERS$ AS O
JOIN RETURNS$ AS R
0N O.[ORDER ID] = R.[ORDER ID]
GROUP BY O.[CUSTOMER NAME]
--WE GET MATCHING RECORD FROM BOTH TABLES WHEN USED INNER JOIN 

--IF CUSTOMER PLACE ANY ORDER AND DIDN'T RETURN 


SELECT O.[CUSTOMER NAME], COUNT[ORDER ID],COUNT(DISTINCT O.[ORDER ID])AS [TOTAL ORDER PLACED],
COUNT (DISTINCT R.[ORDER ID]) AS [TOTAL RETURN ORDER]
FROM ORDERS$ AS O
LEFT JOIN RETURNS$ AS R
0N O.[ORDER ID] = R.[ORDER ID]
GROUP BY O.[CUSTOMER NAME]
--ALL THE RECORDS FROM ORDERS$ WHETHER THEY ARE RETURNED OR NOT.
--LEFT JOIN - SELECT ALL ORDERS FROM ORDER$ WHETHER IT IS MATCHED OR NOT

--USING SUBQUERY

/*SELECT O.[CUSTOMER NAME], COUNT(DISTINCT O.[ORDER ID])AS [TOTAL ORDER PLACED],
(SELECT COUNT(DISTINCT R.[ORDER ID] FROM RETURNS$ AS R WHERE O.[ORDER ID] = R.[ORDER ID]) AS TOTALRETURNORDER
FROM ORDERS$ AS O
GROUP BY O.[CUSTOMER NAME]

HOMEWORK
--SHOW PRODUCT NAME | TOTAL ORDER PLACED | TOTAL RETURN PLACED
--PRODUCT NAME | TOTAL ORDER QUANTITY | TOTAL RETURN QUANTITY
   TOTAL ORDER QUANTITY IS SUM*/


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--CUSTOMER NAME | TOTAL ORDER PLACED | TOTAL RETURN ORDERS ------793 ROWS

SELECT *FROM ORDERS$
SELECT *FROM RETURNS$

SELECT 
O.[CUSTOMER NAME],COUNT(DISTINCT O.[ORDER ID]) AS [TOTAL ORDER PLACED],COUNT( DISTINCT R.[ORDER ID])AS [TOTAL RETURN ORDERS]
FROM ORDERS$ O
LEFT JOIN RETURNS$ R
ON O.[ORDER ID] = R.[ORDER ID]
GROUP BY [CUSTOMER NAME]

SELECT *FROM ORDERS$ WHERE [CUSTOMER NAME] = 'MICHAEL CHEN'

--PRODUCT NAME  |  TOTAL ORDER PLACED  |  TOTAL RETURN PLACED  ------ 1850 ROWS

SELECT O.[PRODUCT NAME],COUNT(DISTINCT O.[ORDER ID])AS [TOTAL ORDER PLACED],COUNT(DISTINCT R.[ORDER ID]) AS [TOTAL RETURN PLACED]
FROM ORDERS$ O
LEFT JOIN RETURNS$ R
ON O.[ORDER ID] = R.[ORDER ID]
GROUP BY [PRODUCT NAME]

--PRODUCT NAME | TOTAL ORDER QUANTITY | TOTAL RETURN QUANTITY  ----- 1850 ROWS
SELECT O.[PRODUCT NAME],COUNT(O.QUANTITY)AS [TOTAL ORDER QUANTITY], COUNT(R.[ORDER ID])AS [TOTAL RETURN QUANTITY]
FROM ORDERS$ O
LEFT JOIN RETURNS$ R
ON O.[ORDER ID] = R.[ORDER ID]
GROUP BY [PRODUCT NAME]

SELECT [ORDER ID] FROM ORDERS$ WHERE [PRODUCT NAME] = '#10- 4 1/8" x 9 1/2" Recycled Envelopes'

-------------------------------------------------------------------------------------------------------------------------------

--Customer name who never returned any order

SELECT TOP 10 *FROM ORDERS$
SELECT TOP 10 *FROM RETURNS$



SELECT DISTINCT [CUSTOMER NAME] FROM ORDERS$ WHERE 
[ORDER ID]NOT IN (SELECT [ORDER ID]FROM RETURNS$)

--ALL THE CUSTOMER NAME WHO NEVER RETURNED ORDER WITH THEIR QUANTITY

SELECT DISTINCT [CUSTOMER NAME],SUM(QUANTITY)
FROM ORDERS$
WHERE [ORDER ID]NOT IN (SELECT [ORDER ID]FROM RETURNS$)
GROUP BY [CUSTOMER NAME]

SELECT [CUSTOMER NAME],SUM(QUANTITY)FROM ORDERS$
WHERE [ORDER ID]NOT IN (SELECT [ORDER ID]FROM RETURNS$)
GROUP BY [CUSTOMER NAME]

--CUSTOMER NAME WHO RETURNED ORDER AND THEIR QUANTITY

SELECT [CUSTOMER NAME], SUM(QUANTITY) FROM ORDERS$
WHERE [ORDER ID] IN (SELECT [ORDER ID] FROM RETURNS$)
GROUP BY [CUSTOMER NAME]

----------------------------------------------------

JOIN -WE NEED TO CLEARLY KNOW WHAT TYPE OF JOIN WE HAVE TO USE INNER JOIN,LEFT, RIGHT JOIN
JOIN IS ALWAYS FASTER THAN SUBQUERY.

-----------------------------------------------------------

SELECT TOP 10 *FROM ORDERS$

YEAR | MONTHNAME | TOTAL ORDER | TOTALSALES | TOTALQUANTITY

--WAY 1
SELECT YEAR([ORDER DATE])AS YEAR, 
DATENAME(MONTH,[ORDER DATE])AS MONTHNAME,
COUNT(DISTINCT[ORDER ID])AS TOTALORDER,
SUM (SALES)AS TOTALSALES,
SUM(QUANTITY)AS TOTALQUANTITY 
FROM ORDERS$
GROUP BY YEAR([ORDER DATE]),DATENAME(MONTH,[ORDER DATE])
ORDER BY YEAR([ORDER DATE]),DATENAME(MONTH,[ORDER DATE])

--WAY 2
SELECT YEAR([ORDER DATE])AS YEAR, 
MONTH([ORDER DATE])AS MONTHNAME,
COUNT(DISTINCT[ORDER ID])AS TOTALORDER,
SUM (SALES)AS TOTALSALES,
SUM(QUANTITY)AS TOTALQUANTITY 
FROM ORDERS$
GROUP BY YEAR([ORDER DATE]),MONTH([ORDER DATE])
ORDER BY YEAR([ORDER DATE]),MONTH([ORDER DATE])

-- DATENAME(MONTH, [ORDER DATE]) which returns the name of the month (e.g., "January", "February").
-- MONTH([ORDER DATE]) which returns the numerical month (e.g., 1 for January, 2 for February).

--WAY 3
SELECT 
    YEAR([ORDER DATE]) AS YEAR, 
    DATENAME(MONTH, [ORDER DATE]) AS MONTHNAME,
    MONTH([ORDER DATE]) AS MONTHNUMBER,  -- Add month number for correct ordering
    COUNT(DISTINCT [ORDER ID]) AS TOTALORDER,
    SUM(SALES) AS TOTALSALES,
    SUM(QUANTITY) AS TOTALQUANTITY
FROM 
    ORDERS$
GROUP BY 
    YEAR([ORDER DATE]), 
    DATENAME(MONTH, [ORDER DATE]), 
    MONTH([ORDER DATE])
ORDER BY 
    YEAR([ORDER DATE]), 
    MONTH([ORDER DATE]);


-- WHENEVER WE APPLY GROUP BY ,WE GO WITH NON AGGREGATE COLUMN

SELECT DATENAME(MONTH,GETDATE())
SELECT MONTH(GETDATE())
--Whenever getting numeric value or total means always use SUM
--ORDER ID is a Varchar type
--Whenever non numeric value we go with COUNT

------------------------------------------------------------------------------------------------------------------------------------------------------------------


